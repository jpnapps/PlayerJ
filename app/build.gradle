plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
}
apply from: '../versions.gradle'
android {
    compileSdkVersion 31
  //  buildToolsVersion "30.0.3"
/*    compileSdkVersion 28
    buildToolsVersion "28.0.2"*/
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def name = versionProps['VERSION_NAME']
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.jpndev.player"
            minSdkVersion 23
            targetSdkVersion 31
            versionName name
            versionCode code
            //  buildConfigField("String","BASE_URL",MY_URL)
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

/*    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }*/
        signingConfigs {
            debug {
                /* storeFile file(project.property("MyApp.signing"))
                 storePassword project.property("MyApp.signing.password")
                 keyAlias project.property("MyApp.signing.alias")
                 keyPassword project.property("MyApp.signing.alias.password")*/
            }

            release {
                //    storeFile file(project.property("MyApp.signing"))
                    storeFile file('../playerj.jks')
                    storePassword "jpn#playerj7"
                    keyAlias project.property("MyApp.signing.alias")
                    keyPassword "jpn#playerj7"
                    v2SigningEnabled false
            }
        }


        buildTypes {
            release {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
               // signingConfig signingConfigs.release
                minifyEnabled false
                debuggable false
            }
            debug {
                //test
                //debug=true
                // signingConfig signingConfigs.release
                minifyEnabled false
                debuggable true
            }
            flavorDimensions "default"
            productFlavors {
                suresh {
                    applicationIdSuffix ".alpha"
                    buildConfigField "String", "BASE_URL", '"http://sjtechy.online/frontend/web/mock-tests/"'
                    buildConfigField "String", "BASE_BACKEND_URL", '"http://sjtechy.online/backend/web/1/"'
                    buildConfigField "String", "MID_URL", '"view?id="'
                    buildConfigField "Boolean", "isShowApi", 'true'
                    buildConfigField "Boolean", "isSuperUser", 'true'
                    buildConfigField "Boolean", "isLive", 'false'
                    buildConfigField "String", "API_NAME", '"Api : Alpha"'
                }
                beta {
                    applicationIdSuffix ".testing"
                    buildConfigField "String", "BASE_URL", '"http://sjtechy.online/frontend/web/mock-tests/"'
                    buildConfigField "String", "BASE_BACKEND_URL", '"http://sjtechy.online/backend/web/1/"'
                    buildConfigField "String", "MID_URL", '"view?id="'
                    buildConfigField "Boolean", "isShowApi", 'true'
                    buildConfigField "Boolean", "isSuperUser", 'true'
                    buildConfigField "Boolean", "isLive", 'false'
                    buildConfigField "String", "API_NAME", '"Api : Testing"'
                }
                prod {
                    applicationIdSuffix ".prod"
                    buildConfigField "String", "BASE_URL", '"http://sjtechy.online/frontend/web/mock-tests/"'
                    buildConfigField "String", "BASE_BACKEND_URL", '"http://sjtechy.online/backend/web/1/"'
                    buildConfigField "String", "MID_URL", '"view?id="'
                    buildConfigField "Boolean", "isShowApi", 'true'
                    buildConfigField "Boolean", "isLive", 'true'
                    buildConfigField "Boolean", "isSuperUser", 'true'
                    buildConfigField "String", "API_NAME", '"Api : Live with copy "'
                    resValue "string", "digit_text", '""'
                    resValue "string", "two_text", '""'
                    resValue "string", "small_text", '" "'
                    resValue "string", "medium2_text", '""'
                    resValue "string", "mediuml_text", '""'
                    resValue "string", "long_text", '""'
                }
                live {
                    buildConfigField "String", "API_NAME", '""'
                    buildConfigField "Boolean", "isShowApi", 'false'
                    buildConfigField "String", "BASE_URL", '"http://sjtechy.online/frontend/web/mock-tests/"'
                    buildConfigField "String", "BASE_BACKEND_URL", '"http://sjtechy.online/backend/web/1/"'
                    buildConfigField "String", "MID_URL", '"view?id="'
                    buildConfigField "Boolean", "isLive", 'true'
                    buildConfigField "Boolean", "isShowApi", 'false'
                    buildConfigField "Boolean", "isSuperUser", 'false'
                    resValue "string", "digit_text", '""'
                    resValue "string", "two_text", '""'
                    resValue "string", "small_text", '""'
                    resValue "string", "medium2_text", '""'
                    resValue "string", "mediuml_text", '""'
                    resValue "string", "long_text", '""'
                }
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    increaseVersionCode()

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'RestrictedApi'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

def increaseVersionCode() {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleRelease)) {
            /* when run release task */
            def versionPropsFile = file('version.properties')

            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                def build = versionProps['VERSION_BUILD'].toInteger() + 1
                def code = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_BUILD'] = build.toString()
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            } else {
                throw new GradleException("Could not read version.properties!")
            }
        }
    }
}

//task doIncrementVersionCode << {
//    println("Incrementing the Version Code")
//    increaseVersionCode()
//}

tasks.register("doIncrementVersionCode") {
    println("Incremnent version code")
    increaseVersionCode()
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    //  implementation 'com.google.android.gms:play-services-cast-framework:20.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    //local db
    implementation("androidx.room:room-runtime:$room_version")
    implementation project(path: ':utillibrary')
    implementation 'androidx.preference:preference:1.1.1'
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")
    //coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    /*Livedata &viewmodel */
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    //Hlit
    implementation "com.google.dagger:hilt-android:$hlit_version"
    kapt "com.google.dagger:hilt-android-compiler:$hlit_version"
    // NavGraph
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    // implementation 'androidx.appcompat:appcompat:1.3.0'
    //implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    testImplementation "com.google.truth:truth:1.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //Glide
    implementation "com.github.bumptech.glide:glide:4.12.0"
    kapt "com.github.bumptech.glide:compiler:4.12.0"
/*  implementation "com.github.bumptech.glide:glide:$Glide_version"
    kapt "com.github.bumptech.glide:compiler:$Glide_version"*/

    //Exo videoplayer
    // dependancy for exoplayer
    //implementation 'com.google.android.exoplayer:exoplayer:2.12.1'
    // implementation 'com.google.android.exoplayer:exoplayer:2.15.0'
    implementation "com.google.android.exoplayer:exoplayer:2.15.0"
    implementation 'com.google.android.exoplayer:extension-mediasession:2.15.0'
    //  api 'com.intuit.ssp:ssp-android:1.0.6'
    //api 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.android.exoplayer:extension-cast:2.15.0'
    // implementation 'com.google.android.exoplayer:extension-cast:2.9.6'
    // implementation  'com.android.support:mediarouter-v7:28.0.0'
    implementation "androidx.mediarouter:mediarouter:1.2.5"
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.4'
    //firebasw
    implementation platform('com.google.firebase:firebase-bom:28.4.2')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    def appCenterSdkVersion = '4.3.1'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

}